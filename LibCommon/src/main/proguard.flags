# To enable ProGuard in your project, edit project.properties
# to define the proguard.config property as described in that file.
#
# Add project specific ProGuard rules here.
# By default, the flags in this file are appended to flags specified
# in ${sdk.dir}/tools/proguard/proguard-android.txt
# You can edit the include path and order by changing the ProGuard
# include property in project.properties.
#
# For more details, see
#   http://developer.android.com/guide/developing/tools/proguard.html

### ProGuard优化指令 ###
# 代码混淆压缩比,在0~7之间,默认是5
-optimizationpasses 5
# 混淆时不使用大小写混合,混淆后的类名为小写
-dontusemixedcaseclassnames
# 混淆时不去忽略非public的类
-dontskipnonpubliclibraryclasses
# 混淆时不去忽略非public类的成员
-dontskipnonpubliclibraryclassmembers
# 不做预校验,Android是不需要预校验的
-dontpreverify
# 有了verbose,混淆后就会生成类名->混淆后类名的映射文件.使用printmapping指定映射文件的名称.
-verbose
-printmapping mapping.txt
# 指定混淆使用的算法
-optimizations !code/simplification/arithmetic,!field/*,!class/merging/*
# 抛出异常时保留代码行号
-keepattributes SourceFile,LineNumberTable
# 忽略警告
-ignorewarnings

# Add any project specific keep options here:
# If your project uses WebView with JS, uncomment the following
# and specify the fully qualified class name to the JavaScript interface
# class:
#-keepclassmembers class fqcn.of.javascript.interface.for.webview {
#   public *;
#}

### keep framework class ###
# Android framework class都是需要保留的,因为这些子类都有可能被外部调用
-keep public class * extends android.app.Activity
-keep public class * extends android.app.Application
-keep public class * extends android.app.Service
-keep public class * extends android.content.BroadcastReceiver
-keep public class * extends android.content.ContentProvider
-keep public class * extends android.preference.Preference
-keep public class * extends android.app.backup.BackupAgentHelper
-keep public class * extends android.app.backup.BackupAgent
-keep public class com.android.vending.licensing.ILicensingService

### 保留JNI类的native方法 ###
-keepclasseswithmembernames class * {
    native <methods>;
}

### 保留自定义控件(继承自View)不被混淆 ###
-keep public class * extends android.view.View {
    *** get*();
    void set*(***);
    public <init>(android.content.Context);
    public <init>(android.content.Context, android.util.AttributeSet);
    public <init>(android.content.Context, android.util.AttributeSet, int);
}

### 保留在Activity中的方法参数是View的方法 ###
#在layout里面编写onClick时就不会被影响 
-keepclassmembers class * extends android.app.Activity {
    public void *(android.view.View);
}

### 保留枚举类的values和valueOf方法 ###
#因为java通过反射来调用它们,所以如果被混淆,会导致ClassNotFoundException
-keepclassmembers enum * {
    public static **[] values();
    public static ** valueOf(java.lang.String);
}

### 保留Parcelable对象的static CREATOR域 ###
#这是Android用来反序列化对象的.由于CREATOR是在运行时被调用,所以如果不加规则,ProGuard会把它当成无用的成员直接去掉.
# keep Parcelable CREATOR members
-keepclassmembers class * implements android.os.Parcelable {
    public static final android.os.Parcelable$Creator *;
}

### 不混淆实现Serializable接口的类 ###
#尽管Android推荐我们使用实现Parcelable接口来序列化类,但是难免代码中还可以通过实现Serializable接口来序列化
#为了防止能够正常序列化和反序列化,需要加入如下规则
-keepnames class * implements java.io.Serializable
-keepclassmembers class * implements java.io.Serializable {
    static final long serialVersionUID;
    private static final java.io.ObjectStreamField[] serialPersistentFields;
    private void writeObject(java.io.ObjectOutputStream);
    private void readObject(java.io.ObjectInputStream);
    java.lang.Object writeReplace();
    java.lang.Object readResolve();
}

### 代码中使用了反射和注解需要增加如下规则 ###
-keepattributes Signature,*Annotation*,InnerClasses,RuntimeVisibleAnnotations,AnnotationDefault

### 对于R(资源)下的所有类及其方法,都不能被混淆 ###
-keep class **.R$* {
    *;
}

### 不提示兼容库的错误警告 ###
# Android代码中一般都会导入android.support.* jar包,为了防止影响ProGuard混淆,可以去除这些jar包的警告.示例如下
# The support library contains references to newer platform versions.
# Don't warn about those in case this app is linking against an older
# platform version.  We know about them, and they are safe.
-dontwarn android.support.v4.**
-keep class android.support.v4.** {*;}
-keep public class * extends android.support.v4.**

### 使用assumenosideeffects命令去掉应用中的打印语句 ###
-keep class * extends java.lang.annotation.Annotation {*;}
-assumenosideeffects class android.util.Log {
    public static *** v(...);
    public static *** i(...);
    public static *** d(...);
    public static *** w(...);
    public static *** e(...);
}

### 第三方库混淆方案 ###
#Jars-QingTing
#-libraryjars libs/qtsdk.jar
#-libraryjars libs/armeabi/libqtplayer.so
#-libraryjars libs/armeabi-v7a/libqtplayer.so

#-dontwarn org.apache.http.**
#-dontwarn fm.qingting.**
#-keep class fm.qingting.** {*;}

#System
-libraryjars libs/android-support-v4.jar
#org.apache
-libraryjars libs/httpcore-4.4.10.jar
#Jars-JCIFS
-libraryjars libs/jcifs-1.3.18.jar
-dontwarn jcifs.**
-keep class jcifs.** {*;}
#Jars-JSOUP
-libraryjars libs/jsoup-1.8.3.jar
#Jars-ImageLoader
-libraryjars libs/universal-image-loader-1.9.4-with-sources.jar

### 在Android.mk中配置混淆 ###
#(1) build/core/java.mk
#ifeq ($(filter obfuscation,$(LOCAL_PROGUARD_ENABLED)),)
## By default no obfuscation
#proguard_flags += -dontobfuscate
#endif  # No obfuscation

#(2) 同目录的Android.mk中如下设置如下两句
#LOCAL_PROGUARD_ENABLED  := full
#LOCAL_PROGUARD_FLAG_FILES := proguard.flags